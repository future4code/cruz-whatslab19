{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CaixaDeMensagens","styled","div","UsuarioInput","input","MensagemInput","BotaoEnviar","button","ParagrafoMensagem","p","EnvolveInput","App","state","msgs","nomeUsuario","novaMsg","valorInputUsuario","valorInputMensagem","adicionaMsg","addMsg","novaMensagem","setState","onChangeInputUsuario","event","target","value","onChangeInputMensagem","publicacoes","this","map","item","className","onChange","placeholder","valorMensagem","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAIMA,EAAmBC,IAAOC,IAAV,oQAchBC,EAAeF,IAAOG,MAAV,mFAMZC,EAAgBJ,IAAOG,MAAV,oFAMbE,EAAcL,IAAOM,OAAV,mDAIXC,EAAoBP,IAAOQ,EAAV,0BAEjBC,EAAeT,IAAOC,IAAV,8GAoEHS,E,4MA5DbC,MAAQ,CACNC,KAAM,CACJ,CACEC,YAAa,GACbC,QAAS,KAIbC,kBAAmB,GACnBC,mBAAoB,I,EAGtBC,YAAc,WACZ,IAAMC,EAAS,CACbL,YAAa,EAAKF,MAAMI,kBAAoB,IAC5CD,QAAS,EAAKH,MAAMK,oBAEhBG,EAAY,sBAAO,EAAKR,MAAMC,MAAlB,CAAwBM,IAC1C,EAAKE,SAAS,CAAER,KAAMO,K,EAGxBE,qBAAuB,SAACC,GACtB,EAAKF,SAAS,CAAEL,kBAAmBO,EAAMC,OAAOC,S,EAGlDC,sBAAwB,SAACH,GACvB,EAAKF,SAAS,CAAEJ,mBAAoBM,EAAMC,OAAOC,S,4CAGnD,WACE,IAAME,EAAcC,KAAKhB,MAAMC,KAAKgB,KAAI,SAACC,GACvC,OACE,sBAAKC,UAAW,gBAAhB,UACGD,EAAKhB,YADR,IACsBgB,EAAKf,cAK/B,OACE,eAACf,EAAD,WACE,cAACQ,EAAD,UAAoBmB,IAEpB,eAACjB,EAAD,WACE,cAACP,EAAD,CACEsB,MAAOG,KAAKhB,MAAMI,kBAClBgB,SAAUJ,KAAKN,qBACfW,YAAa,eAEf,cAAC5B,EAAD,CACEoB,MAAOG,KAAKhB,MAAMsB,cAClBF,SAAUJ,KAAKF,sBACfO,YAAa,aAEf,cAAC3B,EAAD,CAAa6B,QAASP,KAAKV,YAA3B,8B,GAtDQkB,IAAMC,WC/BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb85c0f3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nconst CaixaDeMensagens = styled.div`\n  border: 2px solid black;\n  border-radius: 10px;\n  width: 400px;\n  height: 500px;\n  margin: auto;\n  display: flex;\n  flex: 1 1 0%;\n  flex-direction: column;\n  box-pack: end;\n  justify-content: flex-end;\n  padding: 20px;\n`;\n\nconst UsuarioInput = styled.input`\n  border-radius: 5px;\n  width: 70px;\n  margin: 3px;\n`;\n\nconst MensagemInput = styled.input`\n  border-radius: 5px;\n  width: 230px;\n  margin: 3px;\n`;\n\nconst BotaoEnviar = styled.button`\n  border-radius: 5px;\n`;\n\nconst ParagrafoMensagem = styled.p``;\n\nconst EnvolveInput = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  position: static;\n  float: none;\n`;\n\nclass App extends React.Component {\n  state = {\n    msgs: [\n      {\n        nomeUsuario: \"\",\n        novaMsg: \"\"\n      }\n    ],\n\n    valorInputUsuario: \"\",\n    valorInputMensagem: \"\"\n  };\n\n  adicionaMsg = () => {\n    const addMsg = {\n      nomeUsuario: this.state.valorInputUsuario + \":\",\n      novaMsg: this.state.valorInputMensagem\n    };\n    const novaMensagem = [...this.state.msgs, addMsg];\n    this.setState({ msgs: novaMensagem });\n  };\n\n  onChangeInputUsuario = (event) => {\n    this.setState({ valorInputUsuario: event.target.value });\n  };\n\n  onChangeInputMensagem = (event) => {\n    this.setState({ valorInputMensagem: event.target.value });\n  };\n\n  render() {\n    const publicacoes = this.state.msgs.map((item) => {\n      return (\n        <div className={\"app-container\"}>\n          {item.nomeUsuario} {item.novaMsg}\n        </div>\n      );\n    });\n\n    return (\n      <CaixaDeMensagens>\n        <ParagrafoMensagem>{publicacoes}</ParagrafoMensagem>\n\n        <EnvolveInput>\n          <UsuarioInput\n            value={this.state.valorInputUsuario}\n            onChange={this.onChangeInputUsuario}\n            placeholder={\"UsuÃ¡rio\"}\n          />\n          <MensagemInput\n            value={this.state.valorMensagem}\n            onChange={this.onChangeInputMensagem}\n            placeholder={\"Mensagem\"}\n          />\n          <BotaoEnviar onClick={this.adicionaMsg}>ENVIAR</BotaoEnviar>\n        </EnvolveInput>\n      </CaixaDeMensagens>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}